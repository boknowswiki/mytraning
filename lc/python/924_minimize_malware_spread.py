#!/usr/bin/python -t

# union fine solution

class DSU:
    def __init__(self, N):
        self.p = range(N)
        self.sz = [1] * N

    def find(self, x):
        if self.p[x] != x:
            self.p[x] = self.find(self.p[x])
        return self.p[x]

    def union(self, x, y):
        xr = self.find(x)
        yr = self.find(y)
        self.p[xr] = yr
        self.sz[yr] += self.sz[xr]

    def size(self, x):
        return self.sz[self.find(x)]

class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        dsu = DSU(len(graph))
        
        for j, row in enumerate(graph):
            for i in range(j):
                if row[i]:
                    dsu.union(i, j)
                    
        cnt = collections.Counter(dsu.find(u) for u in initial)
        ret = (-1, min(initial))
        
        for node in initial:
            root = dsu.find(node)
            if cnt[root] == 1:
                if dsu.size(root) > ret[0]:
                    ret = dsu.size(root), node
                elif dsu.size(root) == ret[0] and node < ret[1]:
                    ret = dsu.size(root), node
                    
        return ret[1]

