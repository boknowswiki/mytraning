#!/usr/bin/python -t

#union find solution

class DSU:
    def __init__(self, N):
        self.p = range(N)
        self.sz = [1] * N

    def find(self, x):
        if self.p[x] != x:
            self.p[x] = self.find(self.p[x])
        return self.p[x]

    def union(self, x, y):
        xr = self.find(x)
        yr = self.find(y)
        self.p[xr] = yr
        self.sz[yr] += self.sz[xr]

    def size(self, x):
        return self.sz[self.find(x)]

class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        
        n = len(graph)
        
        initial_set = set(initial)
        clean = [x for x in range(n) if x not in initial_set]
        
        dsu = DSU(n)
        
        for u in clean:
            for v in clean:
                if graph[u][v]:
                    dsu.union(u, v)
                    
        cnt = collections.Counter()
        node_to_compo = {}
        for u in initial:
            components = set()
            for v in clean:
                if graph[u][v]:
                    components.add(dsu.find(v))
            node_to_compo[u] = components
            
            for c in components:
                cnt[c] += 1
                
        best = (-1, None)
        
        for u, components in node_to_compo.iteritems():
            score = 0
            for c in components:
                if cnt[c] == 1:
                    score += dsu.size(c)
                    
            if score > best[0] or score == best[0] and u < best[1]:
                best = (score, u)
                
        return best[1]

